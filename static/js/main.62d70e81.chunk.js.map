{"version":3,"sources":["Components/Button/Button.js","Components/NumberPad/numberPad.js","Components/Buttonbg/ButtonBg.js","Components/Calculator/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["buttonKeyboard","props","onClick","keyboardClicked","content","className","numberPad","map","row","key","col","buttonBgKeyboard","Calculator","state","curentCalc","solution","clearScreen","backspace","checkIsSymbol","slice","length","temp","setState","calculate","evalAlternate","convertStrToArr","handleInput","event","target","value","console","log","parseInt","per","charCodeAt","methods","a","b","Math","pow","operators","strArr","i","j","found","push","str","arr","start","end","render","type","placeholder","onChange","e","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.62d70e81.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nconst buttonKeyboard = (props) => {\r\n  return (\r\n    <div\r\n      onClick={() => props.keyboardClicked(props.content)}\r\n      className=\"num-button\"\r\n    >\r\n      <p>{props.content}</p>\r\n    </div>\r\n  );\r\n};\r\nexport default buttonKeyboard;\r\n","import React from \"react\";\r\nimport \"./numberPd.css\";\r\nimport ButtonKeypad from \"../Button/Button\";\r\n\r\nconst numberPad = (props) => {\r\n  let num = [\r\n    [7, 8, 9],\r\n    [4, 5, 6],\r\n    [1, 2, 3],\r\n    [\"00\", 0, \".\"],\r\n  ];\r\n  return (\r\n    <div className=\"numberPad-Wraper\">\r\n      {num.map((row) => {\r\n        return (\r\n          <div key={row} className=\"numberPad-rows\">\r\n            {row.map((col) => (\r\n              <ButtonKeypad\r\n                key={col}\r\n                keyboardClicked={props.keyboardClicked}\r\n                content={col}\r\n              />\r\n            ))}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default numberPad;\r\n","import React from \"react\";\r\nimport \"./ButtonBg.css\";\r\n\r\nconst buttonBgKeyboard = (props) => {\r\n  return (\r\n    <div\r\n      onClick={() => props.keyboardClicked(props.content)}\r\n      className=\"num-buttonBg\"\r\n    >\r\n      <p>{props.content}</p>\r\n    </div>\r\n  );\r\n};\r\nexport default buttonBgKeyboard;\r\n","import React from \"react\";\r\nimport \"./Calculator.css\";\r\nimport ButtonKeyboard from \"../Button/Button\";\r\nimport NumberPad from \"../NumberPad/numberPad\";\r\nimport ButtonBgKeyboard from \"../Buttonbg/ButtonBg\";\r\n// import \"./mathjs\";\r\n\r\nclass Calculator extends React.Component {\r\n  state = {\r\n    curentCalc: \"\",\r\n    solution: \"\",\r\n  };\r\n\r\n  keyboardClicked = (content) => {\r\n    if (content === \"ce\") {\r\n      this.clearScreen();\r\n    } else if (content === \"âŒ«\") {\r\n      this.backspace();\r\n    } else if (content === \"=\") {\r\n      // this.calculate();\r\n      // this.setState()\r\n      // this.checkIsSymbol(\"a\");\r\n    } else {\r\n      if (\r\n        !(\r\n          this.checkIsSymbol(content) &&\r\n          (this.checkIsSymbol(this.state.curentCalc.slice(-1)) ||\r\n            this.state.curentCalc.length === 0)\r\n        )\r\n      ) {\r\n        let temp = this.state.curentCalc + content;\r\n        this.setState({ curentCalc: temp });\r\n        this.calculate(this.evalAlternate(this.convertStrToArr(temp)));\r\n      }\r\n    }\r\n  };\r\n  handleInput = (event) => {\r\n    let temp = event.target.value;\r\n    console.log(temp[temp.length - 1], \"handleInput\", temp);\r\n    if (temp === \"\") {\r\n      this.setState({ curentCalc: temp, solution: \"\" });\r\n      console.log(\"if\", event.target.value);\r\n    } else if (\r\n      this.checkIsSymbol(temp[temp.length - 1]) ||\r\n      parseInt(temp[temp.length - 1]) ||\r\n      temp[temp.length - 1] == \"0\"\r\n    ) {\r\n      this.setState({ curentCalc: temp });\r\n      this.calculate(this.evalAlternate(this.convertStrToArr(temp)));\r\n      console.log(\"elif\", event.target.value);\r\n    }\r\n  };\r\n  checkIsSymbol = (per) => {\r\n    try {\r\n      let temp = per.charCodeAt(0);\r\n      return (\r\n        (temp >= 42 && temp <= 43) || (temp >= 45 && temp <= 47) || temp == 94\r\n      );\r\n    } catch {\r\n      return false;\r\n    }\r\n  };\r\n  // error here two seperate methods needed\r\n  calculate = (per) => {\r\n    console.log(per, \"calc\");\r\n    // if (per) {\r\n      try {\r\n        this.setState({\r\n          solution: per,\r\n        });\r\n      } catch {\r\n        this.setState({\r\n          solution: this.state.solution,\r\n        });\r\n      }\r\n    // } else {\r\n    //   try {\r\n    //     this.setState({\r\n    //       solution: this.evalAlternate(\r\n    //         this.convertStrToArr(this.state.curentCalc)\r\n    //       ),\r\n    //     });\r\n    //   } catch {\r\n    //     this.setState({\r\n    //       solution: this.state.solution,\r\n    //     });\r\n    //   }\r\n    // }\r\n  };\r\n  clearScreen = () => {\r\n    // const temp = this.state.calulations;\r\n    // temp.push(this.state.curentCalc);\r\n    this.setState({ curentCalc: \"\", solution: \"\" });\r\n  };\r\n  backspace = (per) => {\r\n    this.setState({\r\n      curentCalc: this.state.curentCalc.slice(0, -1),\r\n      solution:\"\"\r\n    });\r\n  };\r\n\r\n  evalAlternate = (per) => {\r\n    /*\r\n    this function iterates through the array for avery symbol in order of precidence [\"^\", \"*\", \"/\", \"+\", \"-\"] \r\n    if searches for \"*\" and fond it then, \"found\" will be set to true. in next iteration \r\n    if condition satisfice will do the operation and sent to temp list    \r\n    */\r\n\r\n    let methods = {\r\n      \"^\": (a, b) => Math.pow(a, b),\r\n      \"*\": (a, b) => a * b,\r\n      \"/\": (a, b) => a / b,\r\n      \"+\": (a, b) => a + b,\r\n      \"-\": (a, b) => a - b,\r\n    };\r\n\r\n    let operators = [\"^\", \"*\", \"/\", \"+\", \"-\"];\r\n    let strArr = per;\r\n    let temp = [];\r\n    let i = 0;\r\n    let j = 0;\r\n    let found = false;\r\n\r\n    for (i = 0; i < operators.length; i += 1) {\r\n      for (j = 0; j < strArr.length; j++) {\r\n        if (strArr[j] === operators[i]) {\r\n          // if the specific operator found in the list found = true and\r\n          //  in next iteration else if will run\r\n          found = true;\r\n        } else if (found) {\r\n          // performs the operation and asigns to temp list\r\n          // methods is an obj of arrow functions\r\n          temp[temp.length - 1] = methods[operators[i]](\r\n            temp[temp.length - 1],\r\n            strArr[j]\r\n          );\r\n          found = false;\r\n        } else {\r\n          // if not a symbol push to temp\r\n          temp.push(strArr[j]);\r\n        }\r\n        // console.log(\"strArr,temp,i,j\", strArr, temp, i, j);\r\n      }\r\n      // clears temp ans asigns new list to strArr\r\n      // continues untill only one num left inside the list\r\n      strArr = temp;\r\n      temp = [];\r\n    }\r\n    return strArr[0];\r\n  };\r\n  convertStrToArr = (per) => {\r\n    // console.log(\"inside convertStrToArr clicked\");\r\n\r\n    // converts string to array => \"55+9+58*5-6/5\" = [55,\"+\",9,\"+\",58,\"*\",etc...]\r\n    // initially start = 0 and end = 0. on every iteration end incriments if it finds the sumbol(+-*/)\r\n    // pushes the parseInt(num) (str[start to end] and str[end] to arr)\r\n    // start = end+1,end++ this cycle continues O(n) times\r\n    let str = per;\r\n    let arr = [];\r\n    let start = 0;\r\n    let end = 0;\r\n    let i = 0;\r\n    // let j = 0;\r\n    // let symbols = [\"*\", \"+\", \"-\", \"/\", \"^\"];\r\n\r\n    for (i = 0; i < str.length; i++) {\r\n      if (this.checkIsSymbol(str[i])) {\r\n        arr.push(parseInt(str.slice(start, end)));\r\n        arr.push(str[end]);\r\n        start = end + 1;\r\n        end += 1;\r\n        // console.log(\"if\", start, \" s----e\", end, \"  arr  \", arr);\r\n      } else {\r\n        end += 1;\r\n        // console.log(\"else\", start, \" s----e\", end);\r\n      }\r\n    }\r\n\r\n    // i had to use the bellow lines for situations like list ends with symbol [11,\"+\",2,\"+\"]\r\n    arr.push(parseInt(str.slice(start)));\r\n    console.log(arr,\"str to arr\");\r\n    if (this.checkIsSymbol(str[str.length - 1])) {\r\n      console.log(arr,\" if str to arr\",arr.slice(0, -1));\r\n\r\n      return arr.slice(0, -1);\r\n    } \r\n    // if (arr[arr.length - 1]==NaN) {\r\n    //   console.log(arr,\" if str to arr\",arr.slice(0, -1));\r\n\r\n    //   return arr.slice(0, -1);\r\n    // } \r\n    else {\r\n      console.log(arr,\"else str to arr\");\r\n\r\n      return arr;\r\n    }\r\n  };\r\n\r\n  render = () => {\r\n    return (\r\n      <div className=\"calc-box-lv-1 unselectable\">\r\n        <div className=\"calc-screen\">\r\n          <div className=\"calc-screen1\">\r\n            {/* <p>{this.state.curentCalc}</p> */}\r\n            <input\r\n              type=\"text\"\r\n              placeholder = \"type here\"\r\n              value={this.state.curentCalc}\r\n              onChange={(e) => this.handleInput(e)}\r\n            ></input>\r\n          </div>\r\n          <div className=\"calc-screen2\">\r\n            <h1>{this.state.solution}</h1>\r\n          </div>\r\n        </div>\r\n        <div className=\"empty-space-bw-screen-key\">\r\n          {/* {[\"(\", \")\"].map((per) => (\r\n            <p key={per} onClick={() => this.keyboardClicked(per)}>\r\n              {per}\r\n            </p>\r\n          ))} */}\r\n        </div>\r\n        <div className=\"calc-keyboard\">\r\n          <div className=\"keyboard-numbers-holder\">\r\n            <div className=\"symbols-in-keyboard-numbers-holder\">\r\n              {[\"ce\", \"^\", \"âŒ«\"].map((per) => (\r\n                <ButtonKeyboard\r\n                  key={per}\r\n                  keyboardClicked={() => this.keyboardClicked(per)}\r\n                  content={per}\r\n                />\r\n              ))}\r\n            </div>\r\n            <div className=\"numbers-in-keyboard-numbers-holder\">\r\n              <NumberPad keyboardClicked={this.keyboardClicked} />\r\n            </div>\r\n          </div>\r\n          <div className=\"keyboard-symbols\">\r\n            {[\"/\", \"*\", \"-\", \"+\", \"=\"].map((per) => (\r\n              <ButtonBgKeyboard\r\n                key={per}\r\n                content={per}\r\n                keyboardClicked={this.keyboardClicked}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\nexport default Calculator;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Calculator from \"./Components/Calculator/Calculator\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Calculator />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}