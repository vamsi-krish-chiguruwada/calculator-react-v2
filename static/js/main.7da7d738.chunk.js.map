{"version":3,"sources":["components/button/button.js","components/numberPad/numberPad.js","components/buttonbg/buttonBg.js","components/calculator.js","App.js","serviceWorker.js","index.js"],"names":["buttonKeyboard","props","onClick","keyboardClicked","content","className","numberPad","map","row","key","col","buttonBgKeyboard","Calculator","state","calulations","curentCalc","solution","clearScreen","backspace","calculate","includes","slice","length","temp","setState","evalAlternate","convertStrToArr","per","push","methods","a","b","Math","pow","operators","strArr","i","j","found","str","arr","start","end","symbols","parseInt","render","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7da7d738.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./button.css\";\r\n\r\nconst buttonKeyboard = (props) => {\r\n  return (\r\n    <div\r\n      onClick={() => props.keyboardClicked(props.content)}\r\n      className=\"num-button\"\r\n    >\r\n      <p>{props.content}</p>\r\n    </div>\r\n  );\r\n};\r\nexport default buttonKeyboard;\r\n","import React from \"react\";\r\nimport \"./numberPd.css\";\r\nimport ButtonKeypad from \"../button/button\";\r\n\r\nconst numberPad = (props) => {\r\n  let num = [\r\n    [7, 8, 9],\r\n    [4, 5, 6],\r\n    [1, 2, 3],\r\n    [\"00\", 0, \".\"],\r\n  ];\r\n  return (\r\n    <div className=\"numberPad-Wraper\">\r\n      {num.map((row) => {\r\n        return (\r\n          <div key={row} className=\"numberPad-rows\">\r\n            {row.map((col) => (\r\n              <ButtonKeypad\r\n                key={col}\r\n                keyboardClicked={props.keyboardClicked}\r\n                content={col}\r\n              />\r\n            ))}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default numberPad;\r\n","import React from \"react\";\r\nimport \"./buttonBg.css\";\r\n\r\nconst buttonBgKeyboard = (props) => {\r\n  return (\r\n    <div\r\n      onClick={() => props.keyboardClicked(props.content)}\r\n      className=\"num-buttonBg\"\r\n    >\r\n      <p>{props.content}</p>\r\n    </div>\r\n  );\r\n};\r\nexport default buttonBgKeyboard;\r\n","import React from \"react\";\r\nimport \"./calculator.css\";\r\nimport ButtonKeyboard from \"./button/button\";\r\nimport NumberPad from \"./numberPad/numberPad\";\r\nimport ButtonBgKeyboard from \"./buttonbg/buttonBg\";\r\n// import \"./mathjs\";\r\n\r\nclass Calculator extends React.Component {\r\n  state = {\r\n    calulations: [\"5+6+6\"],\r\n    curentCalc: \"\",\r\n    solution: \"\",\r\n  };\r\n\r\n  keyboardClicked = (content) => {\r\n    if (content === \"ce\") {\r\n      this.clearScreen();\r\n    } else if (content === \"âŒ«\") {\r\n      this.backspace();\r\n    } else if (content === \"=\") {\r\n      this.calculate();\r\n    } else {\r\n      if (\r\n        !(\r\n          [\"/\", \"*\", \"-\", \"+\", \".\", \"^\"].includes(content) &&\r\n          ([\"/\", \"*\", \"-\", \"+\", \".\", \"^\"].includes(\r\n            this.state.curentCalc.slice(-1)\r\n          ) ||\r\n            this.state.curentCalc.length === 0)\r\n        )\r\n      ) {\r\n        let temp = this.state.curentCalc + content;\r\n        this.setState({ curentCalc: temp });\r\n        this.calculate(this.evalAlternate(this.convertStrToArr(temp)));\r\n      }\r\n    }\r\n  };\r\n\r\n  calculate = (per) => {\r\n    if (per) {\r\n      try {\r\n        this.setState({\r\n          solution: per,\r\n        });\r\n      } catch {\r\n        this.setState({\r\n          solution: this.state.solution,\r\n        });\r\n      }\r\n    } else {\r\n      try {\r\n        this.setState({\r\n          solution: this.evalAlternate(\r\n            this.convertStrToArr(this.state.curentCalc)\r\n          ),\r\n        });\r\n      } catch {\r\n        this.setState({\r\n          solution: this.state.solution,\r\n        });\r\n      }\r\n    }\r\n  };\r\n  clearScreen = () => {\r\n    const temp = this.state.calulations;\r\n    temp.push(this.state.curentCalc);\r\n    this.setState({ curentCalc: \"\", solution: \"\", calulations: temp });\r\n  };\r\n  backspace = (per) => {\r\n    this.setState({\r\n      curentCalc: this.state.curentCalc.slice(0, -1),\r\n      solution: \"\",\r\n    });\r\n  };\r\n\r\n  evalAlternate = (per) => {\r\n    /*\r\n    this function iterates through the array for avery symbol in order of precidence [\"^\", \"*\", \"/\", \"+\", \"-\"] \r\n    if searches for \"*\" and fond it then found will be set to true. in next iteration \r\n    if condition satisfice will do the operation and sent to temp list    \r\n    */\r\n\r\n    let methods = {\r\n      \"^\": (a, b) => Math.pow(a, b),\r\n      \"*\": (a, b) => a * b,\r\n      \"/\": (a, b) => a / b,\r\n      \"+\": (a, b) => a + b,\r\n      \"-\": (a, b) => a - b,\r\n    };\r\n\r\n    let operators = [\"^\", \"*\", \"/\", \"+\", \"-\"];\r\n    let strArr = per;\r\n    let temp = [];\r\n    let i = 0;\r\n    let j = 0;\r\n    let found = false;\r\n\r\n    for (i = 0; i < operators.length; i += 1) {\r\n      for (j = 0; j < strArr.length; j++) {\r\n        if (strArr[j] === operators[i]) {\r\n          // if the specific operator found in the list found = true and\r\n          //  in next iteration else if will run\r\n          found = true;\r\n        } else if (found) {\r\n          // performs the operation and asigns to temp list\r\n          // methods is an obj of arrow functions\r\n          temp[temp.length - 1] = methods[operators[i]](\r\n            temp[temp.length - 1],\r\n            strArr[j]\r\n          );\r\n          found = false;\r\n        } else {\r\n          // if not a symbol push to temp\r\n          temp.push(strArr[j]);\r\n        }\r\n        // console.log(\"strArr,temp,i,j\", strArr, temp, i, j);\r\n      }\r\n      // clears temp ans asigns new list to strArr\r\n      // continues untill only one num left inside the list\r\n      strArr = temp;\r\n      temp = [];\r\n    }\r\n    return strArr[0];\r\n  };\r\n  convertStrToArr = (per) => {\r\n    // console.log(\"inside convertStrToArr clicked\");\r\n\r\n    // converts string to array => \"5+9+5*5-6/5\" = [5,\"+\",9,\"+\",5,\"*\",etc...]\r\n    // initially start = 0 and end = 0. on every iteration end incriments if it finds the sumbol(+-*/)\r\n    // pushes the parseInt(num) (str[start to end] and str[end] to arr)\r\n    // start = end+1,end++ this cycle continues O(n) times\r\n    let str = per;\r\n    let arr = [];\r\n    let start = 0;\r\n    let end = 0;\r\n    let i = 0;\r\n    // let j = 0;\r\n    let symbols = [\"*\", \"+\", \"-\", \"/\", \"^\"];\r\n\r\n    for (i = 0; i < str.length; i++) {\r\n      if (symbols.includes(str[i])) {\r\n        arr.push(parseInt(str.slice(start, end)));\r\n        arr.push(str[end]);\r\n        start = end + 1;\r\n        end += 1;\r\n        // console.log(\"if\", start, \" s----e\", end, \"  arr  \", arr);\r\n      } else {\r\n        end += 1;\r\n        // console.log(\"else\", start, \" s----e\", end);\r\n      }\r\n    }\r\n\r\n    // i had to use the bellow lines for situations like list ends with symbol [11,\"+\",2,\"+\"]\r\n    arr.push(parseInt(str.slice(start)));\r\n    if (symbols.includes(str[str.length - 1])) {\r\n      return arr.slice(0, -1);\r\n    } else {\r\n      return arr;\r\n    }\r\n  };\r\n\r\n  render = () => {\r\n    return (\r\n      <div className=\"calc-box-lv-1 unselectable\">\r\n        <div className=\"calc-screen\">\r\n          <div className=\"calc-screen1\">\r\n            <p>{this.state.curentCalc}</p>\r\n          </div>\r\n          <div className=\"calc-screen2\">\r\n            <h1>{this.state.solution}</h1>\r\n          </div>\r\n        </div>\r\n        <div className=\"empty-space-bw-screen-key\">\r\n          {/* {[\"(\", \")\"].map((per) => (\r\n            <p key={per} onClick={() => this.keyboardClicked(per)}>\r\n              {per}\r\n            </p>\r\n          ))} */}\r\n        </div>\r\n        <div className=\"calc-keyboard\">\r\n          <div className=\"keyboard-numbers-holder\">\r\n            <div className=\"symbols-in-keyboard-numbers-holder\">\r\n              {[\"ce\", \"^\", \"âŒ«\"].map((per) => (\r\n                <ButtonKeyboard\r\n                  key={per}\r\n                  keyboardClicked={() => this.keyboardClicked(per)}\r\n                  content={per}\r\n                />\r\n              ))}\r\n            </div>\r\n            <div className=\"numbers-in-keyboard-numbers-holder\">\r\n              <NumberPad keyboardClicked={this.keyboardClicked} />\r\n            </div>\r\n          </div>\r\n          <div className=\"keyboard-symbols\">\r\n            {[\"/\", \"*\", \"-\", \"+\", \"=\"].map((per) => (\r\n              <ButtonBgKeyboard\r\n                key={per}\r\n                content={per}\r\n                keyboardClicked={this.keyboardClicked}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\nexport default Calculator;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Calculator from \"./components/calculator\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Calculator />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}